
// 前端修复1: 修改evaluationService.js的saveEvaluationHistory方法

async saveEvaluationHistory(historyData) {
  try {
    // ====== 新增：重复检测 ======
    console.log('保存评估历史前检查重复...', historyData);
    
    // 检查是否是重复保存请求
    const currentTime = Date.now();
    const requestKey = `${historyData.user_input}|||${historyData.model_answer}`;
    
    // 使用内存缓存防止短时间内重复请求
    if (!this._recentSaves) {
      this._recentSaves = new Map();
    }
    
    const lastSaveTime = this._recentSaves.get(requestKey);
    if (lastSaveTime && (currentTime - lastSaveTime) < 30000) { // 30秒内
      console.log('检测到30秒内重复保存请求，跳过');
      return { success: true, message: '跳过重复保存', is_duplicate: true };
    }
    
    // 记录本次保存时间
    this._recentSaves.set(requestKey, currentTime);
    
    // 清理过期的缓存（保留最近5分钟）
    const fiveMinutesAgo = currentTime - 300000;
    for (const [key, time] of this._recentSaves.entries()) {
      if (time < fiveMinutesAgo) {
        this._recentSaves.delete(key);
      }
    }
    // ====== 重复检测结束 ======
    
    const response = await this.api.post('/evaluation-history', historyData);
    console.log('评估历史保存成功');
    return response.data;
  } catch (error) {
    console.error('保存评估历史失败:', error);
    throw new Error('保存评估历史失败');
  }
}

// 前端修复2: 修改EvaluationForm.js的handleHumanEvaluationSubmit方法
// 确保人工评估只调用更新接口，不触发新记录创建

const handleHumanEvaluationSubmit = async () => {
  // 防重复提交检查
  const now = Date.now();
  if (humanEvaluationSubmitting) {
    message.warning('正在提交中，请勿重复点击');
    return;
  }
  
  if (now - lastSubmissionTime < 3000) {
    message.warning('提交过于频繁，请稍后再试');
    return;
  }
  
  try {
    setHumanEvaluationSubmitting(true);
    setLastSubmissionTime(now);
    setHumanEvaluationLoading(true);
    
    const values = await humanForm.validateFields();
    
    // 构建人工评估数据
    const humanData = {
      human_total_score: values.human_total_score,
      human_reasoning: values.human_reasoning,
      evaluator_name: values.evaluator_name || '评估专家'
    };
    
    // 收集各维度分数
    const humanDimensions = {};
    Object.keys(values).forEach(key => {
      if (key.startsWith('dimension_')) {
        const dimensionKey = key.replace('dimension_', '');
        humanDimensions[dimensionKey] = values[key];
      }
    });
    
    if (Object.keys(humanDimensions).length > 0) {
      humanData.human_dimensions = humanDimensions;
    }
    
    // ====== 关键修复：只调用PUT更新接口，绝不创建新记录 ======
    console.log('提交人工评估数据（仅更新现有记录）:', humanData);
    console.log('目标记录ID:', currentHistoryId);
    
    if (!currentHistoryId) {
      throw new Error('无法获取评估记录ID，请重新评估');
    }
    
    const response = await api.put(`/api/evaluation-history/${currentHistoryId}/human-evaluation`, humanData);
    
    if (response.data.success) {
      message.success('人工评估保存成功');
      setHumanEvaluationVisible(false);
      
      // ====== 删除：不再尝试更新本地状态 ======
      // 人工评估成功后，数据已保存到数据库
      // 用户可以重新评估查看更新后的结果
      
    } else {
      message.error(response.data.message || '人工评估保存失败');
    }
    
  } catch (error) {
    console.error('人工评估提交失败:', error);
    message.error('人工评估提交失败，请重试');
  } finally {
    setHumanEvaluationLoading(false);
    setHumanEvaluationSubmitting(false);
  }
};
